---
- name: get installed version
  ansible.builtin.shell: "{{ starship_install_dir }}/starship -V | cut -f2 -d' '"
  register: starship_installed_version
  changed_when: false
  tags:
    - build

- name: download
  ansible.builtin.get_url:
    url: "{{ starship_tarball_url[ansible_architecture] }}"
    dest: "/tmp/starship-{{ starship_version }}.tar.gz"
  when: starship_installed_version.stdout != starship_version
  tags:
    - build

- name: extract
  ansible.builtin.unarchive:
    src: "/tmp/starship-{{ starship_version }}.tar.gz"
    dest: /tmp
    creates: /tmp/starship
    remote_src: true
  when: starship_installed_version.stdout != starship_version
  tags:
    - build

- name: install
  ansible.builtin.copy:
    src: /tmp/starship
    dest: "{{ starship_install_dir }}/starship"
    remote_src: true
    owner: root
    group: root
    mode: 0755
  when: starship_installed_version.stdout != starship_version
  tags:
    - build

- name: remove downloaded files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/starship
    - "/tmp/starship-{{ starship_version }}.tar.gz"
  tags:
    - build

- name: create config file
  ansible.builtin.template:
    src: starship.toml.j2
    dest: "{{ starship_config_path }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - build

- name: create shell file
  ansible.builtin.template:
    src: starship.sh.j2
    dest: /etc/profile.d/starship.sh
    owner: root
    group: root
    mode: 0644
  tags:
    - build
