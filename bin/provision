#!/usr/bin/env bash
#
# This script downloads the archive of the ansible code from somewhere, extracts it,
# then runs the play script to execute ansible-playbook
#
# usage:
#
#   ./provision [initiator]
#
# example usage:
#
#   ./provision cloud-init
#

[[ $TRACE ]] && set -x
set -e -o pipefail

declare -r temp_dir="$(mktemp -d -t provision.XXXXXX)"
declare -r initiator="$1"
declare -r hostname="$HOSTNAME"
declare environment_name
declare ansible_archive

cleanup() {
  rm -rf "${temp_dir}"
}

trap cleanup EXIT

if [[ -z $initiator ]]; then
  echo "you need to specify the initiator"
  exit 1
fi

# TODO: implement this
set_hostname() {
  hostnamectl hostname $hostname
}

# TODO: this would get the environment name from an instance tag
get_environment() {
  echo "dev"
}

# TODO: this would get the server class from an instance tag
get_server_class() {
  echo "webserver"
}

declare -r environment_name="$(get_environment)"
declare -r server_class="$(get_server_class)"

echo "downloading ansible archive..."
# TODO: implement this
declare -r ansible_archive='/vagrant/ansible-latest.tgz'

if [[ ! -f $ansible_archive ]]; then
  echo "could not find ansible archive"
  exit 1
fi

echo "extracting ansible archive..."
tar -xz -f $ansible_archive -C $temp_dir

cd $temp_dir || exit 1

if [[ ! -d /etc/ansible/facts.d ]]; then
  mkdir -p /etc/ansible/facts.d
fi

# set some custom facts
cat >/etc/ansible/facts.d/custom.fact <<EOF
[hosting]
name=vagrant
location=vm
[environment]
name=dev
EOF

echo "running ansible..."
./bin/play \
  -c $server_class \
  -e $environment_name \
  -i $initiator
